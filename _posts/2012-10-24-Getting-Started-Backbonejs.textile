---
layout: post
title: Getting Started with Backbone js
keywords: javascript backbonejs client side mvc model view controller js jquery
description: Get started with a client side MV* framework like Backbonejs
category: Javascript
class: post46
---
!(right)/images/backbone-logo.png!When I first heard the term client-side MVC I got a vague picture of some sharply written framework in javascript whose job will be to improve the user experience. Being a dev who has been working with MVC frameworks from quite some time(Rails, Cocoa and Asp) I failed to imagine and apply the advantages of MVC based approach on the client side. It was not until one fine summer afternoon when I stumbled upon "Backbone.js":http://www.backbonejs.org on Github, I was finally able to comprehend the level of awesomeness client side MVC offered. I was working on a project called "Kronos":http://kronos.appointmentor.com which relied heavily on javascript and needless to say all the DOM code for jQuery quickly became spaghetti and difficult to maintain. That's when I finally realized the main objective of client side MVC or MV* frameworks, to keep your code maintainable.

Now allow me to elaborate this a little from my experience. If you are the kind of developer who just writes a few lines of javascript code(possible jQuery) to animate a box or fetch a json Feed, an MV* framework is not for you. If you are however a javascript ninja and have to write hundreds of lines of code, to perform CRUD, provide a neat UX and/or keep your code readable, go with a MV* framework like "Backbone.js":http://www.backbonejs.org and be a happy camper for the rest of your dev life. 

Backbone.js like ever other MV* or MVC framework is based on the simple principle:

*Seperation of Concerns*

In Backbone.js' case the main components are as follows:

h3.Models

As the name implies, models here are the data and all the operations like validations, computations etc. we apply on them. In backbone.js a model is defined like this:

{% highlight javascript}    Person = Backbone.Model.extend({
        initialize: function(){
            alert("Welcome to this world");
        }
    });
    
    var person = new Person;
{% endhighlight %}

h3. Views

Now notice that I have been calling backbone.js a MV* framework rather than a MVC or MVVM framework, thats because there are no controllers or ViewModels here. Your controller logic if any, lives inside a View in backbone.js so you view is bascially a ViewController.Views are how the data is presented in your app. You are allowed to take advantage of javascript templating libraries like "Ember.js":http://emberjs.com/ . This is how a view is defined in backbone.js:

{% highlight javascript %}
 SearchView = Backbone.View.extend({
        initialize: function(){
            alert("Alerts suck.");
        }
    });

    // The initialize function is always called when instantiating a Backbone View.
    // Consider it the constructor of the class.
    var search_view = new SearchView();
{% endhighlight %}

h3. Routers

The last piece of the puzzle. The Router's job is to understand and provide the urls necessary for your client side code to work in conjuction with the server side. Althought not necessary to implement, but if your app uses url routing etc they make the job easier. This is how on defines a router:

{% highlight javascript %}
 var AppRouter = Backbone.Router.extend({
        routes: {
            "*actions": "defaultRoute" // matches http://example.com/#anything-here
        }
    });
    // Initiate the router
    var app_router = new AppRouter;

    app_router.on('route:defaultRoute', function(actions) {
        alert(actions);
    })

    // Start Backbone history a necessary step for bookmarkable URL's
    Backbone.history.start();
{% endhighlight %}


Here are some resources I found useful in getting started with backbone.js:

# "Hello Backbone.js":http://arturadib.com/hello-backbonejs/
# "An open source book on backbone.js":http://addyosmani.github.com/backbone-fundamentals/
# "Backbone Tutorials":http://backbonetutorials.com
# "Todo MVC":http://addyosmani.github.com/todomvc/
# "Backbone.js Example":http://css.dzone.com/articles/backbonejs-example-part-1
# "Simple backbone.js model binding example":http://jsfiddle.net/derickbailey/Cpn3g/4/

I hope those of you who are starting with client side MVC/MV* or are already working on it find this post useful. This is all for now. Rock on!!