---
title: Live Reload any Web App
category: Javascript
keywords: grunt, yeoman, rails, livereload, javascript, yeoman, bower, grunt js, workflow, ruby on rails, live
description: Grunt Watch with Rails. A super simple way to enable Live-reload for your Rails(or any other) web app so that you don't have to hit that refresh button ever again.
layout: post
---
!(img-responsive img-circle centreThis)/images/WebSocketIcon.png!
One of the reasons I enjoy working with "Yeoman":http://yeoman.io is that it has live-reload functionality out of the box, which is something very cool as it saves a lot of time and its nice to look at your UI refresh the moment you press the save key. This got me thinking what if there was a simple way to enable any web app for live-reload. I did a little research and found out that almost every framework be it rails, asp.net MVC, Django etc has its own tools and shebangs for live-reload. Today I am going to show you how you can have a unified way to enable live-reload in any web app. For this tutorial I will be using a rails application but this can be applied to any web development stack. I will be using "Grunt":http://gruntjs.com/ to accomplish this feat. 

Now the first thing you need to do in your rails app is to create the following package.json at your root directory:
{% highlight javascript %}
 {
  "name": "super-awesome-rails-app",
  "version": "0.0.0",
  "dependencies": {},
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-contrib-watch": "*"
  },
  "engines": {
    "node": ">=0.8.0"
  }
}
{% endhighlight %}

The important part in the above file is the devDependencies which include grunt and grunt-contrib-watch. You can play around with the other values as you please.

After creating the file:
{% highlight bash %}
npm install
{% endhighlight %}

The next step is to create the following Gruntfile.js:
{% highlight javascript %}
'use strict';
module.exports = function (grunt) {
  grunt.loadNpmTasks('grunt-contrib-watch');
  grunt.initConfig({
    watch: {
      coffeefiles: {
        files: ['app/assets/javascripts/*.js'],
        options: {
          livereload: true,
        }
      },
      erbfiles: {
        files: ['app/views/{,*/}*.erb'],
        options: {
          livereload: true,
        }
      }
    }
  });
}
{% endhighlight %}

As you can see we are telling the grunt-contrib-watch to keep an eye on our javascript files and our views of the rails application. These could be anything for any other web application framework (.cshtml for Asp.net MVC, .py for Python etc.). The next step is to include the following in your application.html.erb layout(or any other view/page you wish to have live-reload on):
{% highlight html %}
<script src="http://localhost:35729/livereload.js"></script>
{% endhighlight %}

Finally all you need to do now is to open a terminal window, navigate to your web app dir and execute:
{% highlight bash %}
grunt watch
{% endhighlight %}

That's it now whenever we save any changes to our .erb or .js files, the browser will automatically refresh. Have fun :)

